---
import Github from './icons/Github.astro';

---

<section class="hero page_section" id="hero">
    <div class="about_container">
        <span class="work_status">
            Disponible para trabajar
        </span>
        <h1>Fabricio Arias Vargas</h1>
        <h2>Desarrollador junior Full Stack</h2>
        <p>Programador apasionado por aprender constantemente nuevos temas que me permitan crear <span class="emphasize">soluciones creativas y eficientes</span>.</p>
        <p>Me gusta crear proyectos que impliquen desafíos interesantes o que busquen <span class="emphasize">resolver un problema</span> que afecte negativamente a las personas, implementando <span class="emphasize">lo mejor de la tecnología</span>.</p>
        <div class="social_container">
            <a href="mailto:fabriav941@gmail.com" class="contact">
                Contáctame
            </a>
            <a href="https://jymn0z17gt2hkhmj.public.blob.vercel-storage.com/cv-Miguel%20Fabricio%20Arias%20Vargas%202-pgeyAmN02Q2CzuQM36j70raXd0gm3C.pdf" target="_blank" class="contact">
                Ver CV
            </a>
            <a href="https://github.com/FabriMig" class="social_link">
                <Github width="24" height="24"/>
            </a>
        </div>  
    </div>
    <div class="torus_container">
        <canvas id="canvas_shapes" width="500px" height="500px"></canvas>
    </div>
    
    <script>
        const canvas = document.getElementById("canvas_shapes") as HTMLCanvasElement;

        if (canvas) {
            const ctx = canvas.getContext("2d")

            if (ctx) {
                class Particle {
                    width: number
                    height: number
                    theta: number
                    phi: number
                    firstPrint: boolean

                    constructor( width: number, height: number, theta: number, phi: number) {
                        this.width = width;
                        this.height = height;
                        this.theta = theta;
                        this.phi = phi;
                        this.firstPrint = false;
                    }

                    rotate(a: number, b: number, ctx: CanvasRenderingContext2D) {
                        const cosPhi = Math.cos(this.phi), cosTheta = Math.cos(this.theta), cosb = Math.cos(b), cosa = Math.cos(a);
                        const sinTheta = Math.sin(this.theta), sinPhi = Math.sin(this.phi), sina = Math.sin(a), sinb = Math.sin(b);
                        const commonFactor = (TORUS_MAJOR_RADIUS + TORUS_MINUS_RADIUS * cosTheta);

                        const xp = commonFactor * (cosb * cosPhi + sina * sinb * sinPhi) - TORUS_MINUS_RADIUS * cosa * sinb * sinTheta;

                        const yp = commonFactor * (cosPhi * sinb - cosb * sina * sinPhi) + TORUS_MINUS_RADIUS * cosa * cosb * sinTheta;

                        const zp = cosa * (TORUS_MAJOR_RADIUS + TORUS_MINUS_RADIUS * cosTheta) * sinPhi + TORUS_MINUS_RADIUS * sina * sinTheta;

                        const xpr = (K1 * xp) / (K2 + zp)
                        const ypr = (K1 * yp) / (K2 + zp)

                        const l = cosPhi * cosTheta * sinb - cosa * cosTheta * sinPhi - sina * sinTheta + cosb * (cosa * sinTheta - cosTheta * sinb * sinPhi) 

                        if (l > 0) {
                            ctx.fillStyle = `rgba(255, 255, 255, ${l})`
                            ctx.fillRect(xpr + 310, ypr + 250, this.width, this.height );
                            
                        }
                    }
                }
                const particles: Particle[] = [];
                const TORUS_MINUS_RADIUS = 1;
                const TORUS_MAJOR_RADIUS = 2;
                const K2 = 20
                const K1 = canvas.width * K2 * 3 / (8 * (TORUS_MINUS_RADIUS + TORUS_MAJOR_RADIUS ));
                const PHI_SPACING = 0.07
                const THETA_SPACING = 0.09
                let a = 90;
                let b = 90;
                let firstRender = true;

                for (let theta = 0; theta < 2 * Math.PI; theta += THETA_SPACING) {
                    for (let phi = 0; phi < 2 * Math.PI; phi += PHI_SPACING) {
                        // const x = (TORUS_MAJOR_RADIUS + TORUS_MINUS_RADIUS * Math.cos(phi)) * Math.cos(theta)
                        // const y = (TORUS_MAJOR_RADIUS + TORUS_MINUS_RADIUS * Math.cos(phi)) * Math.sin(theta)
                        // const z = TORUS_MINUS_RADIUS * Math.sin(phi)

                        particles.push(new Particle(1.5, 1.5, theta, phi))
                    }
                    
                }

                let phiCircleIndex = particles.length;
                const phiCircleParticleAmount = Math.round((2 * Math.PI) / PHI_SPACING);

                const drawAnimation = () => {
                    ctx.clearRect(0, 0, 500, 500);
                    if (firstRender) {
                        for (let index = particles.length - 1; index > phiCircleIndex - phiCircleParticleAmount; index--) {
                            // console.log(index)
                            particles[index].rotate(a, b, ctx)
                        }
                        phiCircleIndex -= phiCircleParticleAmount;
                        // console.log(phiCircleIndex)
                        if (phiCircleIndex === 0) {
                            firstRender = false;
                        }

                    } else {
                        for (const particle of particles) {
                            particle.rotate(a, b, ctx)
                        }
                        a += 0.007
                        b += 0.006
                    }


                    requestAnimationFrame(drawAnimation)
                }
                
                drawAnimation()

            }
        }

    </script>

    <style>
        .hero {
            display: flex;
            width: 100%;
            height: 600px;
        }

        .torus_container {
            width: 45%;
            height: 100%;
        }

        .about_container {
            width: 55%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: 15px;
        }

        .work_status {
            border: 1px solid #FFFFFF;
            padding: 8px 12px;
            /* border-radius: 8px; */
            width: max-content;
        }

        .about_container h1 {
            font-size: 56px;
            font-weight: bold;
            margin: 0;
        }

        .about_container p {
            margin: 0;
            padding: 0;
            color: #A3A3A3;
        }

        .emphasize {
            color: #DFDFDF;
        }

        .about_container h2 {
            font-size: 24px;
            color: #9CA3AF;
            font-weight: normal;
            margin: 0;
            padding: 0;
        }

        .social_container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .contact {
            text-decoration: none;
            padding: 8px 12px;
            background-color: #FFFFFF;
            color: #000000;
            &:hover {
                background-color: #DFDFDF;
            }
        }
        
        .social_link {
            text-decoration: none;
            color: var(--inactive-link-color);
        }

        .social_link:hover {
            color: var(--active-link-color);
        }

        @media (max-width: 600px) {
            .hero {
                flex-direction: column;
                height: auto;
                position: relative;
            }

            .about_container {
                width: 100%;
                padding: 30px;
                box-sizing: border-box;
                position: relative;
                z-index: 100;
                & > h1 {
                    font-size: 3em;
                }
            }

            .torus_container {
                z-index: 10;
                width: 100%;
                position: absolute;
            }

            #canvas_shapes {
                width: 300px;
                height: 300px;
            }
        }

    </style>
</section>